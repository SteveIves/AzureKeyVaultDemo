;;*****************************************************************************
;;
;; File:        GetEncryptionKeys.dbl
;;
;; Description: A Traditional Synergy function to obtain the various keys
;;              required when encrypting data.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

;TODO: (1/12/2018) This import should not be necessary but it is required to work around a runtime / debugger issue
import DataEncryption

function GetEncryptionKeys,         boolean
    required out password,          string
    required out salt,              string
    required out iv,                string
    optional out errorMessage,      string
    endparams

    .include "INC:AzureData.def"

    .define AZURE_KEYVAULT_RESOURCE "https://vault.azure.net"

    .define D_SALT_IV_FILE          "KEYDATA:salt_iv.txt"

    stack record
        ok,                         boolean
        authToken,                  string
        errorText,                  string
    endrecord

    static record
        encryptionKey,              string
        encryptionSalt,             string
        encryptionIv,               string
    endrecord

proc

    ok = true

    ;;If necessary, get the encryption key
    if (encryptionKey==^null || encryptionKey.Length==0)
    begin
        ;;Before we can access the KeyVault service we must get an "access token" from Azure Active Directory

        ;;Create an AzureAD client associated with our AzureAD Tenant (instance)
        data adClient = new ActiveDirectoryClient(AZURE_AD_TENANT_ID)

        ;;Now  request an access token that will allow us to access our KeyVault instance. To do this we
        ;;need to know the unique ID of the KeyVault, as well as a "secret" value associated with it.
        authToken = adClient.GetAppAccessToken(AZURE_KEYVAULT_RESOURCE,AZURE_AD_APP_ID,AZURE_AD_APP_SECRET)

        if (authToken == ^null) then
        begin
            ok = false
            errorText = adClient.ErrorMessage
        end
        else
        begin
            ;;Now we have an access token that will allow us to access the KeyVault

            ;;Create a KeyVault client associated with our KeyVault instance
            data vaultClient = new KeyVaultClient(KEYVAULT_INSTANCE,authToken)

            ;;And finally retrieve our encryption key from the KayVault
            encryptionKey = vaultClient.GetSecret(KEYVAULT_SECRET_NAME,KEYVAULT_SECRET_VERSION)

            if (encryptionKey == ^null)
            begin
                ok = false
                errorText = vaultClient.ErrorMessage
            end
        end
    end

    ;;If necessary, get the salt and IV values

    if (ok && (encryptionSalt==^null || encryptionSalt.Length==0 || encryptionIv==^null || encryptionIv.Length==0 ))
    begin
        data saltValue,     a8
        data ivValue,       a16
        data saltLength,    i4
        data ivLength,      i4
        data tmpch,         i4

        ;;Do we already have salt and IV values saved in a file?
        try
        begin
            ;;Yes, read the values from the file
            open(tmpch=0,i,D_SALT_IV_FILE)
            reads(tmpch,saltValue)
            reads(tmpch,ivValue)
        end
        catch (ex, @NoFileFoundException)
        begin
            ;;No, get new values and save them to the file
            xcall data_saltiv(DC_AES256,saltValue,saltLength,ivValue,ivLength)
            open(tmpch=0,o,D_SALT_IV_FILE)
            writes(tmpch,saltValue)
            writes(tmpch,ivValue)
        end
        finally
        begin
            if (tmpch && %chopen(tmpch))
                close tmpch
        end
        endtry

        encryptionSalt = saltValue
        encryptionIv = ivValue

    end

    ;; Return the results
    if (ok) then
    begin
        password = encryptionKey
        salt = encryptionSalt
        iv = encryptionIv
    end
    else if (^passed(errorMessage))
    begin
        errorMessage = errorText
    end

    freturn ok

endfunction