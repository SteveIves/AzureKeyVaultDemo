;;*****************************************************************************
;;
;; File:        HttpBase.dbl
;;
;; Description: A base class for classes that use the Synergy HTTP API to
;;              interact with HTTP-based web services.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

namespace DataEncryption

    public class HttpBase

        public setprotected property TrustedCaFile, string
        public setprotected property ErrorMessage, string
        public setprotected property Timeout, int

        protected url,              string
        protected request,          string
        protected response,         string
        protected requestHeaders,   [#]string
        protected responseHeaders,  [#]string
        protected errorText,        string
        protected httpError,        i4

        public method HttpBase
            stack record
                tmpval, a256
                tmplen, i4
            endrecord
        proc

            ErrorMessage = ""

            xcall getlog("TRUSTED_CA_FILE",tmpval,tmplen)

            if (!tmplen)
                throw new ApplicationException("Environment variable TRUSTED_CA_FILE is not set!")

            try
            begin
                data ch, i4
                open(ch=0,i,tmpval(1:tmplen))
                close ch
                TrustedCaFile = tmpval(1:tmplen)
            end
            catch (e, @Exception)
            begin
                throw new ApplicationException("Trusted CA's file not found. Check environment variable TRUSTED_CA_FILE!")
            end
            endtry

            Timeout = 10

        endmethod

        public method HttpBase
            required in aTimeout, int
            this()
        proc
            Timeout = aTimeout
        endmethod

        protected method UrlEncode, string
            required in stringToEncode, string

            stack record
                mh, D_HANDLE    ;Memory handle
                mc, int         ;Memory content pointer
                ix, int         ;Loop counter
            endrecord

            structure chr
                ,a1
            endstructure

        proc
            clear mc

            ;Allocate dynamic memory for the return string
            mh = %mem_proc(DM_ALLOC+DM_BLANK, %trim(stringToEncode)*3 )

            for ix from 1 thru %trim(stringToEncode)
            begin

                data dchr, d3, %decml(stringToEncode(ix:1))

                using dchr select
            
                ;Replace spaces with +
                (32),
                    ^m(chr[mc+=1],mh) = "+"

                ;Replace other reserved characters with their hexadecimal value
                (9, 33 thru 41, 43, 44, 47, 58 thru 64, 91 thru 96, 123 thru 126),
                begin
                    ^m(chr[mc+1](1:3),mh) = "%" + %hex(dchr,1)
                    mc+=3
                end
            
                ;Leave other characters unchanged
                (),
                    ^m(chr[mc+=1],mh)=stringToEncode(ix:1)
                endusing

            end

            ;Trim memory to exact size
            mh = %mem_proc(DM_RESIZ,mc,mh)

            mreturn (string)^m(mh)

        endmethod

    endclass

endnamespace